{"ast":null,"code":"// redux/store.js\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport mapReducer from \"./mapSlice\";\n\n// Load from localStorage\nconst loadState = () => {\n  try {\n    const state = localStorage.getItem(\"mapState\");\n    return state ? JSON.parse(state) : undefined;\n  } catch {\n    return undefined;\n  }\n};\nconst saveState = state => {\n  try {\n    const {\n      visitedCountries,\n      wishlistCountries\n    } = state;\n    // Prevent saving if invalid\n    if (Array.isArray(visitedCountries) && visitedCountries.includes(null)) return;\n    if (Array.isArray(wishlistCountries) && wishlistCountries.includes(null)) return;\n    localStorage.setItem(\"mapState\", JSON.stringify(state));\n  } catch {}\n};\nconst store = configureStore({\n  reducer: {\n    map: mapReducer\n  },\n  preloadedState: {\n    map: loadState() || {\n      visitedCountries: [],\n      wishlistCountries: []\n    }\n  }\n});\n\n// Subscribe to state changes and save\nstore.subscribe(() => {\n  saveState(store.getState().map);\n});\nexport default store;","map":{"version":3,"names":["configureStore","mapReducer","loadState","state","localStorage","getItem","JSON","parse","undefined","saveState","visitedCountries","wishlistCountries","Array","isArray","includes","setItem","stringify","store","reducer","map","preloadedState","subscribe","getState"],"sources":["C:/Users/sohla/Documents/Web Projects/Travel-Guide/src/redux/store.js"],"sourcesContent":["// redux/store.js\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport mapReducer from \"./mapSlice\";\r\n\r\n// Load from localStorage\r\nconst loadState = () => {\r\n  try {\r\n    const state = localStorage.getItem(\"mapState\");\r\n    return state ? JSON.parse(state) : undefined;\r\n  } catch {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst saveState = (state) => {\r\n  try {\r\n    const { visitedCountries, wishlistCountries } = state;\r\n    // Prevent saving if invalid\r\n    if (Array.isArray(visitedCountries) && visitedCountries.includes(null)) return;\r\n    if (Array.isArray(wishlistCountries) && wishlistCountries.includes(null)) return;\r\n\r\n    localStorage.setItem(\"mapState\", JSON.stringify(state));\r\n  } catch {}\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    map: mapReducer,\r\n  },\r\n  preloadedState: {\r\n    map: loadState() || {\r\n      visitedCountries: [],\r\n      wishlistCountries: [],\r\n    },\r\n  },\r\n});\r\n\r\n// Subscribe to state changes and save\r\nstore.subscribe(() => {\r\n  saveState(store.getState().map);\r\n});\r\n\r\nexport default store;\r\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,UAAU,MAAM,YAAY;;AAEnC;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAC9C,OAAOF,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAGK,SAAS;EAC9C,CAAC,CAAC,MAAM;IACN,OAAOA,SAAS;EAClB;AACF,CAAC;AAED,MAAMC,SAAS,GAAIN,KAAK,IAAK;EAC3B,IAAI;IACF,MAAM;MAAEO,gBAAgB;MAAEC;IAAkB,CAAC,GAAGR,KAAK;IACrD;IACA,IAAIS,KAAK,CAACC,OAAO,CAACH,gBAAgB,CAAC,IAAIA,gBAAgB,CAACI,QAAQ,CAAC,IAAI,CAAC,EAAE;IACxE,IAAIF,KAAK,CAACC,OAAO,CAACF,iBAAiB,CAAC,IAAIA,iBAAiB,CAACG,QAAQ,CAAC,IAAI,CAAC,EAAE;IAE1EV,YAAY,CAACW,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAACb,KAAK,CAAC,CAAC;EACzD,CAAC,CAAC,MAAM,CAAC;AACX,CAAC;AAED,MAAMc,KAAK,GAAGjB,cAAc,CAAC;EAC3BkB,OAAO,EAAE;IACPC,GAAG,EAAElB;EACP,CAAC;EACDmB,cAAc,EAAE;IACdD,GAAG,EAAEjB,SAAS,CAAC,CAAC,IAAI;MAClBQ,gBAAgB,EAAE,EAAE;MACpBC,iBAAiB,EAAE;IACrB;EACF;AACF,CAAC,CAAC;;AAEF;AACAM,KAAK,CAACI,SAAS,CAAC,MAAM;EACpBZ,SAAS,CAACQ,KAAK,CAACK,QAAQ,CAAC,CAAC,CAACH,GAAG,CAAC;AACjC,CAAC,CAAC;AAEF,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}